package Rules3.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractCondition = 0;
  public static final int AbstractConstraint = 1;
  public static final int AndCondition = 2;
  public static final int AndConstraint = 3;
  public static final int BooleanLiteral = 4;
  public static final int ConstraintGroup = 5;
  public static final int DeleteStatement = 6;
  public static final int DroolsStatement = 7;
  public static final int EmptyStatement = 8;
  public static final int EqualsOperator = 9;
  public static final int ExistsCondition = 10;
  public static final int FactImportStatement = 11;
  public static final int FactImportedRef = 12;
  public static final int FactProperty = 13;
  public static final int FactPropertyAccessorRef = 14;
  public static final int FactSelector = 15;
  public static final int FactSetMethodAccessor = 16;
  public static final int FieldConstraint = 17;
  public static final int File = 18;
  public static final int GreatedThanOperator = 19;
  public static final int GreaterThanEqualOperator = 20;
  public static final int IFileLevelStatement = 21;
  public static final int InsertStatement = 22;
  public static final int LessThanOperator = 23;
  public static final int LiteralRestrictionValue = 24;
  public static final int MultiAnd = 25;
  public static final int MultiOr = 26;
  public static final int MultiRestriction = 27;
  public static final int MultiRestrictionOperator = 28;
  public static final int NotCondition = 29;
  public static final int NotOperator = 30;
  public static final int NullLiteral = 31;
  public static final int NumericLiteral = 32;
  public static final int OrCondition = 33;
  public static final int OrConstraint = 34;
  public static final int Restriction = 35;
  public static final int RestrictionOperator = 36;
  public static final int RestrictionValue = 37;
  public static final int RuleStatement = 38;
  public static final int RuleVariable = 39;
  public static final int RuleVariableRef = 40;
  public static final int SingleValueRestriction = 41;
  public static final int StringLiteral = 42;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L);
    builder.put(0x7e19241b9e617cbeL, AbstractCondition);
    builder.put(0x47aa13e870e2dc35L, AbstractConstraint);
    builder.put(0x47aa13e870db4d5dL, AndCondition);
    builder.put(0x7e19241b9e726729L, AndConstraint);
    builder.put(0x7e19241b9ebc4a06L, BooleanLiteral);
    builder.put(0x7e19241b9e726723L, ConstraintGroup);
    builder.put(0x7e19241b9e756c65L, DeleteStatement);
    builder.put(0x20466d1f4ad47b62L, DroolsStatement);
    builder.put(0x7e19241b9e60be27L, EmptyStatement);
    builder.put(0x2bdd8885e329b1c1L, EqualsOperator);
    builder.put(0x47aa13e870db4d38L, ExistsCondition);
    builder.put(0x7e19241b9e5fe1b7L, FactImportStatement);
    builder.put(0x7e19241b9e725f44L, FactImportedRef);
    builder.put(0x7e19241b9e793468L, FactProperty);
    builder.put(0x7e19241b9e7d398bL, FactPropertyAccessorRef);
    builder.put(0x47aa13e870db4d31L, FactSelector);
    builder.put(0x7e19241b9e800dc7L, FactSetMethodAccessor);
    builder.put(0x7e19241b9eba05afL, FieldConstraint);
    builder.put(0x7e19241b9e5efb76L, File);
    builder.put(0x20466d1f4b224a52L, GreatedThanOperator);
    builder.put(0x2bdd8885e34baaeaL, GreaterThanEqualOperator);
    builder.put(0x75bd3c2760ae482bL, IFileLevelStatement);
    builder.put(0x7e19241b9e61c87eL, InsertStatement);
    builder.put(0x2bdd8885e33bd6a1L, LessThanOperator);
    builder.put(0x7e19241b9ebc4a05L, LiteralRestrictionValue);
    builder.put(0x2bdd8885e32f3d9cL, MultiAnd);
    builder.put(0x2bdd8885e32f3dbcL, MultiOr);
    builder.put(0x2bdd8885e32f3d74L, MultiRestriction);
    builder.put(0x2bdd8885e32f3d9bL, MultiRestrictionOperator);
    builder.put(0x47aa13e870db4d45L, NotCondition);
    builder.put(0x2bdd8885e34a1783L, NotOperator);
    builder.put(0x20466d1f4ae52417L, NullLiteral);
    builder.put(0x7e19241b9ec822beL, NumericLiteral);
    builder.put(0x47aa13e870db4d7aL, OrCondition);
    builder.put(0x47aa13e870ed605aL, OrConstraint);
    builder.put(0x7e19241b9ebc4457L, Restriction);
    builder.put(0x2bdd8885e329b1a0L, RestrictionOperator);
    builder.put(0x7e19241b9ebc445cL, RestrictionValue);
    builder.put(0x7e19241b9e61793cL, RuleStatement);
    builder.put(0x7e19241b9e61c8d6L, RuleVariable);
    builder.put(0x7e19241b9e61c8d5L, RuleVariableRef);
    builder.put(0x7e19241b9ebc445bL, SingleValueRestriction);
    builder.put(0x6ac2b99ff4c4085bL, StringLiteral);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
