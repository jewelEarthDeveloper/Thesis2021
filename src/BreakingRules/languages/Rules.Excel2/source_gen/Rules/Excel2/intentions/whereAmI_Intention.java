package Rules.Excel2.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import de.slisson.mps.tables.runtime.cells.EditorCell_GridCell;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class whereAmI_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public whereAmI_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:1f63b933-8ede-4bca-9a6e-1de36517d195(Rules.Excel2.intentions)", "4305053639645522696"));
  }
  @Override
  public String getPresentation() {
    return "whereAmI";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.getNodeAncestor(node, CONCEPTS.RuleCollection$bT, false, false) != null) && (editorContext.getSelectedCell().getParent() instanceof EditorCell_GridCell);
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      EditorCell eCell = editorContext.getSelectedCell();
      int gridX = 1;
      int gridY = 1;
      if (eCell.getParent() instanceof EditorCell_GridCell) {
        EditorCell_GridCell gCell = as_s6ojy9_a0a0a3a1h(eCell.getParent(), EditorCell_GridCell.class);
        gCell.getGridPosition().getX();
        gridX = gCell.getGridPosition().getX();
        gridY = gCell.getGridPosition().getX();
      }
      return "Im In cell [" + gridX + "," + gridY + "]";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return whereAmI_Intention.this;
    }
  }
  private static <T> T as_s6ojy9_a0a0a3a1h(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RuleCollection$bT = MetaAdapterFactory.getConcept(0x903686680b064529L, 0xa25ba5999072a9a0L, 0x61719c7b08847c63L, "Rules.Excel2.structure.RuleCollection");
  }
}
