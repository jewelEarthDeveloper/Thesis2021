package Rules.Excel2.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class removeFactFromRule_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public removeFactFromRule_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:1f63b933-8ede-4bca-9a6e-1de36517d195(Rules.Excel2.intentions)", "6100895867820166069"));
  }
  @Override
  public String getPresentation() {
    return "removeFactFromRule";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), CONCEPTS.RuleCollection$bT) && (GridUtil.getSelectorFromLocation(editorContext, SNodeOperations.cast(SNodeOperations.getParent(node), CONCEPTS.RuleCollection$bT)) != null);
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      SNode fact = GridUtil.getGridFactFromLocation(editorContext, SNodeOperations.cast(SNodeOperations.getParent(node), CONCEPTS.RuleCollection$bT));
      return "Remove this \"" + BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(SLinkOperations.getTarget(fact, LINKS.type$6tAj)) + "\" Fact selector";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      {
        final SNode rules = SNodeOperations.getParent(node);
        if (SNodeOperations.isInstanceOf(rules, CONCEPTS.RuleCollection$bT)) {
          SNode factSelector = GridUtil.getSelectorFromLocation(editorContext, rules);
          SNodeOperations.deleteNode(SNodeOperations.getNodeAncestor(factSelector, CONCEPTS.NotCondition$NS, false, false));
          SNodeOperations.deleteNode(SNodeOperations.getNodeAncestor(factSelector, CONCEPTS.ExistsCondition$zq, false, false));
          SNodeOperations.deleteNode(factSelector);
        }
      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return removeFactFromRule_Intention.this;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RuleCollection$bT = MetaAdapterFactory.getConcept(0x903686680b064529L, 0xa25ba5999072a9a0L, 0x61719c7b08847c63L, "Rules.Excel2.structure.RuleCollection");
    /*package*/ static final SConcept NotCondition$NS = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d45L, "Rules2.structure.NotCondition");
    /*package*/ static final SConcept ExistsCondition$zq = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d38L, "Rules2.structure.ExistsCondition");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$6tAj = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e5fe1b7L, 0x7e19241b9e5fe1baL, "type");
  }
}
