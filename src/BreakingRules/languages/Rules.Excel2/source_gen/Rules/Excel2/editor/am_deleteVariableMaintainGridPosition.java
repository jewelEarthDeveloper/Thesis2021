package Rules.Excel2.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import de.slisson.mps.tables.runtime.cells.EditorCell_GridCell;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class am_deleteVariableMaintainGridPosition {

  /*package*/ static AbstractCellAction createAction_DELETE(final SNode node) {
    return new AbstractCellAction() {
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {
        EditorCell_GridCell gCell = null;
        EditorCell eCell = editorContext.getSelectedCell();
        while (!(Objects.equals(eCell.getParent(), null))) {
          if (eCell.getParent() instanceof EditorCell_GridCell) {
            gCell = as_7sw4ei_a0a0a0a2a1a0a0a1(eCell.getParent(), EditorCell_GridCell.class);
            break;
          }
          eCell = eCell.getParent();
        }

        String cellId = gCell.getCellId();
        SNode rule = SNodeOperations.getNodeAncestor(node, CONCEPTS.RuleStatement$TK, false, false);

        SNodeOperations.deleteNode(node);

        SelectionUtil.selectNode(editorContext, rule);
        EditorCell targetCell = editorContext.getEditorComponent().findCellWithId(rule, cellId);

        EditorCell_GridCell cell = (EditorCell_GridCell) targetCell;
        int i = cell.getCells().length;

        if (!(Objects.equals(cell, null)) && Objects.equals(cell.getCells().length, 1)) {
          jetbrains.mps.nodeEditor.cells.EditorCell innerCell = cell.getCells()[0];
          editorContext.getEditorComponent().changeSelection(innerCell);
        }
      }

    };
  }

  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    CellAction originalDelete = editorCell.getAction(CellActionType.DELETE);
    CellAction originalBackspace = editorCell.getAction(CellActionType.BACKSPACE);

    // set actions that were actually defined 
    setDefinedCellActions(editorCell, node, context);

    // If we set a DELETE action but no BACKSPACE action, 
    // use the DELETE action for BACKSPACE as well. 
    CellAction delete = editorCell.getAction(CellActionType.DELETE);
    CellAction backspace = editorCell.getAction(CellActionType.BACKSPACE);
    if (delete != originalDelete && backspace == originalBackspace) {
      editorCell.setAction(CellActionType.BACKSPACE, delete);
    }
    if (delete != originalDelete) {
      editorCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_DELETE_SET, OB);
    }
    if (backspace != originalBackspace) {
      editorCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_BACKSPACE_SET, OB);
    }
  }

  private static final Object OB = new Object();

  public static void setDefinedCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    // set cell actions from all imported action maps 

    // set cell actions defined directly in this action map 
    editorCell.setAction(CellActionType.DELETE, createAction_DELETE(node));
  }

  public static void setDefinedCellActionsOfType(EditorCell editorCell, SNode node, EditorContext context, CellActionType actionType) {

    // set cell action(s) of the given type from imported action maps 

    // set cell action of the given type defined directly in this action map 
    if (Objects.equals(actionType, CellActionType.DELETE)) {
      editorCell.setAction(actionType, createAction_DELETE(node));
    }
  }
  private static <T> T as_7sw4ei_a0a0a0a2a1a0a0a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RuleStatement$TK = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61793cL, "Rules2.structure.RuleStatement");
  }
}
