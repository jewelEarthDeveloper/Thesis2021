package Rules.Excel2.editor;

/*Generated by MPS */

import javax.swing.plaf.basic.BasicLabelUI;
import java.awt.Dimension;
import javax.swing.JComponent;
import java.awt.Rectangle;
import java.awt.Insets;
import java.awt.Graphics;
import javax.swing.JLabel;
import javax.swing.Icon;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;

public class VerticalLabelUI extends BasicLabelUI {
  static {
    labelUI = new VerticalLabelUI();
  }

  @Override
  public Dimension getPreferredSize(JComponent c) {
    Dimension dim = super.getPreferredSize(c);
    return new Dimension(dim.height, dim.width);
  }

  private static Rectangle paintIconR = new Rectangle();
  private static Rectangle paintTextR = new Rectangle();
  private static Rectangle paintViewR = new Rectangle();
  private static Insets paintViewInsets = new Insets(0, 0, 0, 0);


  @Override
  public void paint(Graphics g, JComponent c) {
    JLabel label = (JLabel) c;
    String text = label.getText();
    Icon icon = ((label.isEnabled()) ? label.getIcon() : label.getDisabledIcon());
    if ((icon == null) && (text == null)) {
      return;
    }
    FontMetrics fm = g.getFontMetrics();
    paintViewInsets = c.getInsets(paintViewInsets);
    paintViewR.x = paintViewInsets.left;
    paintViewR.y = paintViewInsets.top;
    // Use inverted height & width 
    paintViewR.height = c.getWidth() - (paintViewInsets.left + paintViewInsets.right);
    paintViewR.width = c.getHeight() - (paintViewInsets.top + paintViewInsets.bottom);
    paintIconR.x = paintIconR.y = paintIconR.width = paintIconR.height = 0;
    paintTextR.x = paintTextR.y = paintTextR.width = paintTextR.height = 0;
    String clippedText = layoutCL(label, fm, text, icon, paintViewR, paintIconR, paintTextR);
    Graphics2D g2 = (Graphics2D) g;
    AffineTransform tr = g2.getTransform();

    g2.rotate(-Math.PI / 2);
    g2.translate(-c.getHeight(), 0);

    if (text != null) {
      int textX = paintTextR.x;
      int textY = paintTextR.y + fm.getAscent();
      paintEnabledText(label, g, clippedText, textX, textY);
    }
    g2.setTransform(tr);
  }

}
