package Rules.Excel2.editor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JLabel;
import org.jetbrains.mps.openapi.language.SProperty;

public class HeaderUtil {
  private static SNode hv = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x903686680b064529L, 0xa25ba5999072a9a0L, 0x6f84eaa525e5c37eL, "Rules.Excel2.structure.HeaderValue"));
  public static EditorCell VerticalCell(HeaderValue value, EditorContext editorContext) {
    SPropertyOperations.assign(hv, PROPS.fact$z2hp, value.getFact());
    SPropertyOperations.assign(hv, PROPS.property$1zd4, value.getProperty());
    SPropertyOperations.assign(hv, PROPS.restriction$z2Jr, value.getRestriction());
    EditorCell cell = new CellCreateOperation_a0d0b(editorContext, hv).create();
    return cell;
  }
  public static class CellCreateOperation_a0d0b extends AbstractEditorBuilder {
    private SNode myNode;

    public CellCreateOperation_a0d0b(EditorContext editorContext, SNode node) {
      super(editorContext);
      myNode = node;
    }

    @NotNull
    @Override
    public SNode getNode() {
      return myNode;
    }

    public EditorCell create() {
      return createCollection_0();
    }
    private EditorCell createCollection_0() {
      EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
      editorCell.setCellId("Collection_wu4gfb_a0a0a3a1");
      editorCell.addEditorCell(createJComponent_0());
      return editorCell;
    }
    private EditorCell createJComponent_0() {
      EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_wu4gfb_a0a0a0a3a1(), "JComponent_wu4gfb_a0a0a0d0b");
      editorCell.setCellId("JComponent_wu4gfb_a0a0a0d0b_0");
      return editorCell;
    }
    private JComponent _QueryFunction_JComponent_wu4gfb_a0a0a0a3a1() {
      String text = (isEmptyString(SPropertyOperations.getString(myNode, PROPS.restriction$z2Jr)) ? " " + SPropertyOperations.getString(myNode, PROPS.fact$z2hp) : "    " + SPropertyOperations.getString(myNode, PROPS.property$1zd4) + " " + SPropertyOperations.getString(myNode, PROPS.restriction$z2Jr));
      JLabel label = new JLabel(text);
      label.setUI(new VerticalLabelUI());
      return label;
    }
    private static boolean isEmptyString(String str) {
      return str == null || str.isEmpty();
    }
  }

  private static final class PROPS {
    /*package*/ static final SProperty fact$z2hp = MetaAdapterFactory.getProperty(0x903686680b064529L, 0xa25ba5999072a9a0L, 0x6f84eaa525e5c37eL, 0x6f84eaa525e5c37fL, "fact");
    /*package*/ static final SProperty property$1zd4 = MetaAdapterFactory.getProperty(0x903686680b064529L, 0xa25ba5999072a9a0L, 0x6f84eaa525e5c37eL, 0x6f84eaa52608eed3L, "property");
    /*package*/ static final SProperty restriction$z2Jr = MetaAdapterFactory.getProperty(0x903686680b064529L, 0xa25ba5999072a9a0L, 0x6f84eaa525e5c37eL, 0x6f84eaa525e5c381L, "restriction");
  }
}
