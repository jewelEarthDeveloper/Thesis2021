package Rules2.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SConcept;

public final class RuleStatement__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61793cL, "Rules2.structure.RuleStatement");

  public static final SMethod<Integer> maxFactOccurence_id4_O$GD8oE6h = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("maxFactOccurence").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4_O$GD8oE6h").build();
  public static final SMethod<SNode> nthSelectorOfFact_id3YYeoU12TL4 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("nthSelectorOfFact").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3YYeoU12TL4").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<SNode> nthSelectorOfProperty_id3YYeoU13TBW = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("nthSelectorOfProperty").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3YYeoU13TBW").build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(maxFactOccurence_id4_O$GD8oE6h, nthSelectorOfFact_id3YYeoU12TL4, nthSelectorOfProperty_id3YYeoU13TBW);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SLinkOperations.setTarget(__thisNode__, LINKS.attributes$V_VW, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9eb25ea0L, "Rules2.structure.RuleAttributes")));
  }

  /*package*/ static int maxFactOccurence_id4_O$GD8oE6h(@NotNull SNode __thisNode__) {
    Iterable<SNode> facts = ListSequence.fromList(SNodeOperations.getNodeDescendants(__thisNode__, CONCEPTS.FactImportedRef$el, false, new SAbstractConcept[]{})).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.target$C2kL);
      }
    });
    int max = 1;

    for (final SNode fact : Sequence.fromIterable(facts)) {

      int factCount = Sequence.fromIterable(facts).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Objects.equals(it, fact);
        }
      }).count();
      max = (factCount > max ? factCount : max);
    }

    return max;
  }
  /*package*/ static SNode nthSelectorOfFact_id3YYeoU12TL4(@NotNull SNode __thisNode__, final SNode fact, int n) {
    Iterable<SNode> selectors = ListSequence.fromList(SNodeOperations.getNodeDescendants(__thisNode__, CONCEPTS.FactSelector$lQ, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.fact$47k6), LINKS.target$C2kL), fact);
      }
    });
    int selectorCount = 0;
    for (SNode selector : Sequence.fromIterable(selectors)) {
      if (selectorCount == n) {
        return selector;
      }
      selectorCount++;
    }
    return null;
  }
  /*package*/ static SNode nthSelectorOfProperty_id3YYeoU13TBW(@NotNull SNode __thisNode__, final SNode property, int n) {
    Iterable<SNode> selectors = ListSequence.fromList(SNodeOperations.getNodeDescendants(__thisNode__, CONCEPTS.FactSelector$lQ, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Sequence.fromIterable(SLinkOperations.collect(SNodeOperations.getNodeDescendants(it, CONCEPTS.FactProperty$Ri, false, new SAbstractConcept[]{}), LINKS.property$dmNh)).contains(property);
      }
    });

    int selectorCount = 0;
    for (SNode selector : Sequence.fromIterable(selectors)) {
      if (selectorCount == n) {
        return selector;
      }
      selectorCount++;
    }
    return null;
  }

  /*package*/ RuleStatement__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) maxFactOccurence_id4_O$GD8oE6h(node));
      case 1:
        return (T) ((SNode) nthSelectorOfFact_id3YYeoU12TL4(node, (SNode) parameters[0], ((int) (Integer) parameters[1])));
      case 2:
        return (T) ((SNode) nthSelectorOfProperty_id3YYeoU13TBW(node, (SNode) parameters[0], ((int) (Integer) parameters[1])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink attributes$V_VW = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61793cL, 0x7e19241b9eb2878aL, "attributes");
    /*package*/ static final SReferenceLink target$C2kL = MetaAdapterFactory.getReferenceLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e725f44L, 0x7e19241b9e725f45L, "target");
    /*package*/ static final SContainmentLink fact$47k6 = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d31L, 0x47aa13e870db8104L, "fact");
    /*package*/ static final SReferenceLink property$dmNh = MetaAdapterFactory.getReferenceLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e793468L, 0x7e19241b9e793469L, "property");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FactImportedRef$el = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e725f44L, "Rules2.structure.FactImportedRef");
    /*package*/ static final SConcept FactSelector$lQ = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d31L, "Rules2.structure.FactSelector");
    /*package*/ static final SConcept FactProperty$Ri = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e793468L, "Rules2.structure.FactProperty");
  }
}
