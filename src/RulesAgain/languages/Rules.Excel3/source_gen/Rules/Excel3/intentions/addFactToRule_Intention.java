package Rules.Excel3.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class addFactToRule_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  public addFactToRule_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:a25c00e0-7028-40e0-8f00-fe35827800de(Rules.Excel3.intentions)", "6536733596094337852"));
  }
  @Override
  public String getPresentation() {
    return "addFactToRule";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.getNodeAncestor(node, CONCEPTS.RuleCollection$jd, false, false) != null);
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<SNode> paramList = parameter(node, context);
    if (paramList != null) {
      for (SNode param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<SNode> parameter(final SNode node, final EditorContext editorContext) {
    return ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), CONCEPTS.FactImportStatement$MF, false, new SAbstractConcept[]{})).toListSequence();
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private SNode myParameter;
    public IntentionImplementation(SNode parameter) {
      myParameter = parameter;
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add new condition for the \"" + SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(myParameter, LINKS.type$kzl2), LINKS.classifier$cxMr), PROPS.name$MnvL) + "\" Fact to the Rule \"" + SPropertyOperations.getString(node, PROPS.name$MnvL) + "\"";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode cond = SLinkOperations.addNewChild(node, LINKS.conditions$3J4, CONCEPTS.ExistsCondition$i9);
      SNode selector = SLinkOperations.setNewChild(cond, LINKS.selector$9bkx, null);
      SNode factRef = SLinkOperations.setNewChild(selector, LINKS.fact$id2P, null);
      SLinkOperations.setTarget(factRef, LINKS.target$Q83w, myParameter);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return addFactToRule_Intention.this;
    }
    public Object getParameter() {
      return myParameter;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RuleCollection$jd = MetaAdapterFactory.getConcept(0x993797d3830647edL, 0xba6d94925225abc2L, 0x75bd3c2760c11ea0L, "Rules.Excel3.structure.RuleCollection");
    /*package*/ static final SConcept FactImportStatement$MF = MetaAdapterFactory.getConcept(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e5fe1b7L, "Rules3.structure.FactImportStatement");
    /*package*/ static final SConcept ExistsCondition$i9 = MetaAdapterFactory.getConcept(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d38L, "Rules3.structure.ExistsCondition");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink type$kzl2 = MetaAdapterFactory.getContainmentLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e5fe1b7L, 0x7e19241b9e5fe1baL, "type");
    /*package*/ static final SReferenceLink classifier$cxMr = MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier");
    /*package*/ static final SContainmentLink conditions$3J4 = MetaAdapterFactory.getContainmentLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61793cL, 0x7e19241b9e617cbcL, "conditions");
    /*package*/ static final SContainmentLink selector$9bkx = MetaAdapterFactory.getContainmentLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d38L, 0x47aa13e870db4d2fL, "selector");
    /*package*/ static final SContainmentLink fact$id2P = MetaAdapterFactory.getContainmentLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d31L, 0x47aa13e870db8104L, "fact");
    /*package*/ static final SReferenceLink target$Q83w = MetaAdapterFactory.getReferenceLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e725f44L, 0x7e19241b9e725f45L, "target");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
