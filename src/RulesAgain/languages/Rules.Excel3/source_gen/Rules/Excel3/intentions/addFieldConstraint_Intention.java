package Rules.Excel3.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import Rules3.behavior.FactImportStatement__BehaviorDescriptor;
import Rules.Excel3.behavior.RuleCollection__BehaviorDescriptor;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.openapi.intentions.ParameterizedIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class addFieldConstraint_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  public addFieldConstraint_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:a25c00e0-7028-40e0-8f00-fe35827800de(Rules.Excel3.intentions)", "8621219337626181826"));
  }
  @Override
  public String getPresentation() {
    return "addFieldConstraint";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }
  private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (SNodeOperations.getNodeAncestor(node, CONCEPTS.RuleCollection$jd, false, false) != null);
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    List<IntentionExecutable> list = ListSequence.fromList(new ArrayList<IntentionExecutable>());
    List<SNode> paramList = parameter(node, context);
    if (paramList != null) {
      for (SNode param : paramList) {
        ListSequence.fromList(list).addElement(new IntentionImplementation(param));
      }
    }
    return list;
  }
  private List<SNode> parameter(final SNode node, final EditorContext editorContext) {
    {
      final SNode rule = node;
      if (SNodeOperations.isInstanceOf(rule, CONCEPTS.RuleStatement$Cv)) {
        {
          final SNode rules = SNodeOperations.getParent(rule);
          if (SNodeOperations.isInstanceOf(rules, CONCEPTS.RuleCollection$jd)) {
            Iterable<SNode> facts = ListSequence.fromList(SNodeOperations.getNodeDescendants(rule, CONCEPTS.FactSelector$4_, false, new SAbstractConcept[]{})).select(new ISelector<SNode, SNode>() {
              public SNode select(SNode it) {
                return SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.fact$id2P), LINKS.target$Q83w);
              }
            });
            Iterable<SNode> props = Sequence.fromIterable(facts).translate(new ITranslator2<SNode, SNode>() {
              public Iterable<SNode> translate(SNode it) {
                return (Iterable<SNode>) FactImportStatement__BehaviorDescriptor.getters_id7u$IkXPYzIx.invoke(it);
              }
            }).distinct();
            Iterable<SNode> existingProperties = RuleCollection__BehaviorDescriptor.propertiesInCollection_id6keRPa8DhEy.invoke(rules);
            return Sequence.fromIterable(props).subtract(Sequence.fromIterable(existingProperties)).toListSequence();
          }
        }
      }
    }

    if ((SNodeOperations.getNodeAncestor(node, CONCEPTS.FactSelector$4_, false, false) != null)) {
      SNode selector = SNodeOperations.getNodeAncestor(node, CONCEPTS.FactSelector$4_, false, false);
      if ((SNodeOperations.getNodeAncestor(selector, CONCEPTS.RuleCollection$jd, false, false) != null)) {
        SNode rules = SNodeOperations.getNodeAncestor(selector, CONCEPTS.RuleCollection$jd, false, false);
        Iterable<SNode> existingProperties = RuleCollection__BehaviorDescriptor.propertiesInCollection_id6keRPa8DhEy.invoke(rules);
        return Sequence.fromIterable(FactImportStatement__BehaviorDescriptor.getters_id7u$IkXPYzIx.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(selector, LINKS.fact$id2P), LINKS.target$Q83w))).subtract(Sequence.fromIterable(existingProperties)).toListSequence();
      }
    }

    return null;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable implements ParameterizedIntentionExecutable {
    private SNode myParameter;
    public IntentionImplementation(SNode parameter) {
      myParameter = parameter;
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add selector for the property " + SPropertyOperations.getString(myParameter, PROPS.name$MnvL);
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SNode selector = ListSequence.fromList(SNodeOperations.getNodeDescendants(node, CONCEPTS.FactSelector$4_, false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return Sequence.fromIterable(FactImportStatement__BehaviorDescriptor.getters_id7u$IkXPYzIx.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(it, LINKS.fact$id2P), LINKS.target$Q83w))).contains(myParameter);
        }
      }).first();
      SNode constraint = SLinkOperations.addNewChild(selector, LINKS.constraints$YjI3, CONCEPTS.FieldConstraint$7z);
      SNode prop = SLinkOperations.setNewChild(constraint, LINKS.fieldName$6Hj0, null);
      SLinkOperations.setTarget(prop, LINKS.property$rsy0, myParameter);
      SLinkOperations.setNewChild(constraint, LINKS.restriction$jwYY, null);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return addFieldConstraint_Intention.this;
    }
    public Object getParameter() {
      return myParameter;
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RuleCollection$jd = MetaAdapterFactory.getConcept(0x993797d3830647edL, 0xba6d94925225abc2L, 0x75bd3c2760c11ea0L, "Rules.Excel3.structure.RuleCollection");
    /*package*/ static final SConcept RuleStatement$Cv = MetaAdapterFactory.getConcept(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61793cL, "Rules3.structure.RuleStatement");
    /*package*/ static final SConcept FactSelector$4_ = MetaAdapterFactory.getConcept(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d31L, "Rules3.structure.FactSelector");
    /*package*/ static final SConcept FieldConstraint$7z = MetaAdapterFactory.getConcept(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9eba05afL, "Rules3.structure.FieldConstraint");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink fact$id2P = MetaAdapterFactory.getContainmentLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d31L, 0x47aa13e870db8104L, "fact");
    /*package*/ static final SReferenceLink target$Q83w = MetaAdapterFactory.getReferenceLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e725f44L, 0x7e19241b9e725f45L, "target");
    /*package*/ static final SContainmentLink constraints$YjI3 = MetaAdapterFactory.getContainmentLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d31L, 0x7e19241b9eba0614L, "constraints");
    /*package*/ static final SContainmentLink fieldName$6Hj0 = MetaAdapterFactory.getContainmentLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9eba05afL, 0x7e19241b9eba05b0L, "fieldName");
    /*package*/ static final SReferenceLink property$rsy0 = MetaAdapterFactory.getReferenceLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e793468L, 0x7e19241b9e793469L, "property");
    /*package*/ static final SContainmentLink restriction$jwYY = MetaAdapterFactory.getContainmentLink(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9eba05afL, 0x7e19241b9ebc4458L, "restriction");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
