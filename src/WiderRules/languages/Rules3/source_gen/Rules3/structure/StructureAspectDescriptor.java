package Rules3.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAbstractCondition = createDescriptorForAbstractCondition();
  /*package*/ final ConceptDescriptor myConceptAbstractConstraint = createDescriptorForAbstractConstraint();
  /*package*/ final ConceptDescriptor myConceptAndCondition = createDescriptorForAndCondition();
  /*package*/ final ConceptDescriptor myConceptAndConstraint = createDescriptorForAndConstraint();
  /*package*/ final ConceptDescriptor myConceptBooleanLiteral = createDescriptorForBooleanLiteral();
  /*package*/ final ConceptDescriptor myConceptConstraintGroup = createDescriptorForConstraintGroup();
  /*package*/ final ConceptDescriptor myConceptDeleteStatement = createDescriptorForDeleteStatement();
  /*package*/ final ConceptDescriptor myConceptDroolsStatement = createDescriptorForDroolsStatement();
  /*package*/ final ConceptDescriptor myConceptEmptyStatement = createDescriptorForEmptyStatement();
  /*package*/ final ConceptDescriptor myConceptEqualsOperator = createDescriptorForEqualsOperator();
  /*package*/ final ConceptDescriptor myConceptExistsCondition = createDescriptorForExistsCondition();
  /*package*/ final ConceptDescriptor myConceptFactImportStatement = createDescriptorForFactImportStatement();
  /*package*/ final ConceptDescriptor myConceptFactImportedRef = createDescriptorForFactImportedRef();
  /*package*/ final ConceptDescriptor myConceptFactProperty = createDescriptorForFactProperty();
  /*package*/ final ConceptDescriptor myConceptFactPropertyAccessorRef = createDescriptorForFactPropertyAccessorRef();
  /*package*/ final ConceptDescriptor myConceptFactSelector = createDescriptorForFactSelector();
  /*package*/ final ConceptDescriptor myConceptFactSetMethodAccessor = createDescriptorForFactSetMethodAccessor();
  /*package*/ final ConceptDescriptor myConceptFieldConstraint = createDescriptorForFieldConstraint();
  /*package*/ final ConceptDescriptor myConceptFile = createDescriptorForFile();
  /*package*/ final ConceptDescriptor myConceptGreatedThanOperator = createDescriptorForGreatedThanOperator();
  /*package*/ final ConceptDescriptor myConceptGreaterThanEqualOperator = createDescriptorForGreaterThanEqualOperator();
  /*package*/ final ConceptDescriptor myConceptIFileLevelStatement = createDescriptorForIFileLevelStatement();
  /*package*/ final ConceptDescriptor myConceptInsertStatement = createDescriptorForInsertStatement();
  /*package*/ final ConceptDescriptor myConceptLessThanOperator = createDescriptorForLessThanOperator();
  /*package*/ final ConceptDescriptor myConceptLiteralRestrictionValue = createDescriptorForLiteralRestrictionValue();
  /*package*/ final ConceptDescriptor myConceptMultiAnd = createDescriptorForMultiAnd();
  /*package*/ final ConceptDescriptor myConceptMultiOr = createDescriptorForMultiOr();
  /*package*/ final ConceptDescriptor myConceptMultiRestriction = createDescriptorForMultiRestriction();
  /*package*/ final ConceptDescriptor myConceptMultiRestrictionOperator = createDescriptorForMultiRestrictionOperator();
  /*package*/ final ConceptDescriptor myConceptNotCondition = createDescriptorForNotCondition();
  /*package*/ final ConceptDescriptor myConceptNotOperator = createDescriptorForNotOperator();
  /*package*/ final ConceptDescriptor myConceptNullLiteral = createDescriptorForNullLiteral();
  /*package*/ final ConceptDescriptor myConceptNumericLiteral = createDescriptorForNumericLiteral();
  /*package*/ final ConceptDescriptor myConceptOrCondition = createDescriptorForOrCondition();
  /*package*/ final ConceptDescriptor myConceptOrConstraint = createDescriptorForOrConstraint();
  /*package*/ final ConceptDescriptor myConceptRestriction = createDescriptorForRestriction();
  /*package*/ final ConceptDescriptor myConceptRestrictionOperator = createDescriptorForRestrictionOperator();
  /*package*/ final ConceptDescriptor myConceptRestrictionValue = createDescriptorForRestrictionValue();
  /*package*/ final ConceptDescriptor myConceptRuleStatement = createDescriptorForRuleStatement();
  /*package*/ final ConceptDescriptor myConceptRuleVariable = createDescriptorForRuleVariable();
  /*package*/ final ConceptDescriptor myConceptRuleVariableRef = createDescriptorForRuleVariableRef();
  /*package*/ final ConceptDescriptor myConceptSingleValueRestriction = createDescriptorForSingleValueRestriction();
  /*package*/ final ConceptDescriptor myConceptStringLiteral = createDescriptorForStringLiteral();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.extendedLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage");
    deps.aggregatedLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractCondition, myConceptAbstractConstraint, myConceptAndCondition, myConceptAndConstraint, myConceptBooleanLiteral, myConceptConstraintGroup, myConceptDeleteStatement, myConceptDroolsStatement, myConceptEmptyStatement, myConceptEqualsOperator, myConceptExistsCondition, myConceptFactImportStatement, myConceptFactImportedRef, myConceptFactProperty, myConceptFactPropertyAccessorRef, myConceptFactSelector, myConceptFactSetMethodAccessor, myConceptFieldConstraint, myConceptFile, myConceptGreatedThanOperator, myConceptGreaterThanEqualOperator, myConceptIFileLevelStatement, myConceptInsertStatement, myConceptLessThanOperator, myConceptLiteralRestrictionValue, myConceptMultiAnd, myConceptMultiOr, myConceptMultiRestriction, myConceptMultiRestrictionOperator, myConceptNotCondition, myConceptNotOperator, myConceptNullLiteral, myConceptNumericLiteral, myConceptOrCondition, myConceptOrConstraint, myConceptRestriction, myConceptRestrictionOperator, myConceptRestrictionValue, myConceptRuleStatement, myConceptRuleVariable, myConceptRuleVariableRef, myConceptSingleValueRestriction, myConceptStringLiteral);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AbstractCondition:
        return myConceptAbstractCondition;
      case LanguageConceptSwitch.AbstractConstraint:
        return myConceptAbstractConstraint;
      case LanguageConceptSwitch.AndCondition:
        return myConceptAndCondition;
      case LanguageConceptSwitch.AndConstraint:
        return myConceptAndConstraint;
      case LanguageConceptSwitch.BooleanLiteral:
        return myConceptBooleanLiteral;
      case LanguageConceptSwitch.ConstraintGroup:
        return myConceptConstraintGroup;
      case LanguageConceptSwitch.DeleteStatement:
        return myConceptDeleteStatement;
      case LanguageConceptSwitch.DroolsStatement:
        return myConceptDroolsStatement;
      case LanguageConceptSwitch.EmptyStatement:
        return myConceptEmptyStatement;
      case LanguageConceptSwitch.EqualsOperator:
        return myConceptEqualsOperator;
      case LanguageConceptSwitch.ExistsCondition:
        return myConceptExistsCondition;
      case LanguageConceptSwitch.FactImportStatement:
        return myConceptFactImportStatement;
      case LanguageConceptSwitch.FactImportedRef:
        return myConceptFactImportedRef;
      case LanguageConceptSwitch.FactProperty:
        return myConceptFactProperty;
      case LanguageConceptSwitch.FactPropertyAccessorRef:
        return myConceptFactPropertyAccessorRef;
      case LanguageConceptSwitch.FactSelector:
        return myConceptFactSelector;
      case LanguageConceptSwitch.FactSetMethodAccessor:
        return myConceptFactSetMethodAccessor;
      case LanguageConceptSwitch.FieldConstraint:
        return myConceptFieldConstraint;
      case LanguageConceptSwitch.File:
        return myConceptFile;
      case LanguageConceptSwitch.GreatedThanOperator:
        return myConceptGreatedThanOperator;
      case LanguageConceptSwitch.GreaterThanEqualOperator:
        return myConceptGreaterThanEqualOperator;
      case LanguageConceptSwitch.IFileLevelStatement:
        return myConceptIFileLevelStatement;
      case LanguageConceptSwitch.InsertStatement:
        return myConceptInsertStatement;
      case LanguageConceptSwitch.LessThanOperator:
        return myConceptLessThanOperator;
      case LanguageConceptSwitch.LiteralRestrictionValue:
        return myConceptLiteralRestrictionValue;
      case LanguageConceptSwitch.MultiAnd:
        return myConceptMultiAnd;
      case LanguageConceptSwitch.MultiOr:
        return myConceptMultiOr;
      case LanguageConceptSwitch.MultiRestriction:
        return myConceptMultiRestriction;
      case LanguageConceptSwitch.MultiRestrictionOperator:
        return myConceptMultiRestrictionOperator;
      case LanguageConceptSwitch.NotCondition:
        return myConceptNotCondition;
      case LanguageConceptSwitch.NotOperator:
        return myConceptNotOperator;
      case LanguageConceptSwitch.NullLiteral:
        return myConceptNullLiteral;
      case LanguageConceptSwitch.NumericLiteral:
        return myConceptNumericLiteral;
      case LanguageConceptSwitch.OrCondition:
        return myConceptOrCondition;
      case LanguageConceptSwitch.OrConstraint:
        return myConceptOrConstraint;
      case LanguageConceptSwitch.Restriction:
        return myConceptRestriction;
      case LanguageConceptSwitch.RestrictionOperator:
        return myConceptRestrictionOperator;
      case LanguageConceptSwitch.RestrictionValue:
        return myConceptRestrictionValue;
      case LanguageConceptSwitch.RuleStatement:
        return myConceptRuleStatement;
      case LanguageConceptSwitch.RuleVariable:
        return myConceptRuleVariable;
      case LanguageConceptSwitch.RuleVariableRef:
        return myConceptRuleVariableRef;
      case LanguageConceptSwitch.SingleValueRestriction:
        return myConceptSingleValueRestriction;
      case LanguageConceptSwitch.StringLiteral:
        return myConceptStringLiteral;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAbstractCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "AbstractCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL);
    b.class_(false, true, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424236592318");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAbstractConstraint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "AbstractConstraint", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870e2dc35L);
    b.class_(false, true, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/5163961811780951093");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAndCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "AndCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d5dL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.AbstractCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/5163961811780455773");
    b.version(2);
    b.aggregate("leftSelector", 0x75bd3c2760ae485dL).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL).optional(false).ordered(true).multiple(false).origin("8484003412859308125").done();
    b.aggregate("rightSelector", 0x75bd3c2760ae485eL).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL).optional(false).ordered(true).multiple(false).origin("8484003412859308126").done();
    b.alias("and");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAndConstraint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "AndConstraint", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e726729L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.ConstraintGroup", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e726723L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424237700905");
    b.version(2);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "BooleanLiteral", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4a06L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.LiteralRestrictionValue", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4a05L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424242543110");
    b.version(2);
    b.property("value", 0x7e19241b9ebc4a07L).type(PrimitiveTypeId.BOOLEAN).origin("9086333424242543111").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstraintGroup() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "ConstraintGroup", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e726723L);
    b.class_(false, true, false);
    b.super_("Rules3.structure.AbstractConstraint", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870e2dc35L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424237700899");
    b.version(2);
    b.aggregate("rightPredicate", 0x7e19241b9e726724L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870e2dc35L).optional(false).ordered(true).multiple(false).origin("9086333424237700900").done();
    b.aggregate("leftPredicate", 0x7e19241b9e726726L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870e2dc35L).optional(false).ordered(true).multiple(false).origin("9086333424237700902").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeleteStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "DeleteStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e756c65L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.DroolsStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x20466d1f4ad47b62L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424237898853");
    b.version(2);
    b.aggregate("deletedFact", 0x7e19241b9e756c66L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61c8d6L).optional(false).ordered(true).multiple(false).origin("9086333424237898854").done();
    b.alias("delete");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDroolsStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "DroolsStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x20466d1f4ad47b62L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/2325666238750292834");
    b.version(2);
    b.property("explicit", 0x20466d1f4ad4d0e9L).type(PrimitiveTypeId.BOOLEAN).origin("2325666238750314729").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmptyStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "EmptyStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e60be27L);
    b.class_(false, false, false);
    b.parent(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x75bd3c2760ae482bL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424236543527");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqualsOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "EqualsOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e329b1c1L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.RestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e329b1a0L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622107144641");
    b.version(2);
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExistsCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "ExistsCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d38L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.AbstractCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/5163961811780455736");
    b.version(2);
    b.property("explicit", 0x7e19241b9e726935L).type(PrimitiveTypeId.BOOLEAN).origin("9086333424237701429").done();
    b.aggregate("selector", 0x47aa13e870db4d2fL).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d31L).optional(false).ordered(true).multiple(false).origin("5163961811780455727").done();
    b.alias("exists");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFactImportStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "FactImportStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e5fe1b7L);
    b.class_(false, false, false);
    b.parent(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x75bd3c2760ae482bL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424236487095");
    b.version(2);
    b.aggregate("type", 0x7e19241b9e5fe1baL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL).optional(false).ordered(true).multiple(false).origin("9086333424236487098").done();
    b.alias("import");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFactImportedRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "FactImportedRef", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e725f44L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424237698884");
    b.version(2);
    b.associate("target", 0x7e19241b9e725f45L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e5fe1b7L).optional(false).origin("9086333424237698885").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFactProperty() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "FactProperty", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e793468L);
    b.class_(false, false, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424238146664");
    b.version(2);
    b.associate("property", 0x7e19241b9e793469L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL).optional(false).origin("9086333424238146665").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFactPropertyAccessorRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "FactPropertyAccessorRef", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e7d398bL);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424238410123");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFactSelector() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "FactSelector", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d31L);
    b.class_(false, false, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/5163961811780455729");
    b.version(2);
    b.aggregate("variable", 0x7e19241b9e75ddb7L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61c8d6L).optional(true).ordered(true).multiple(false).origin("9086333424237927863").done();
    b.aggregate("fact", 0x47aa13e870db8104L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e725f44L).optional(false).ordered(true).multiple(false).origin("5163961811780468996").done();
    b.aggregate("constraints", 0x7e19241b9eba0614L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870e2dc35L).optional(true).ordered(true).multiple(true).origin("9086333424242394644").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFactSetMethodAccessor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "FactSetMethodAccessor", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e800dc7L);
    b.class_(false, false, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424238595527");
    b.version(2);
    b.associate("method", 0x7e19241b9e89501eL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL).optional(false).origin("9086333424239202334").done();
    b.aggregate("actualArgument", 0xf8c78301aeL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(true).ordered(true).multiple(true).origin("1068499141038").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFieldConstraint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "FieldConstraint", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9eba05afL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.AbstractConstraint", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870e2dc35L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424242394543");
    b.version(2);
    b.aggregate("variable", 0x2bdd8885e3345e2cL).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61c8d6L).optional(true).ordered(true).multiple(false).origin("3160832622107844140").done();
    b.aggregate("fieldName", 0x7e19241b9eba05b0L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e793468L).optional(true).ordered(true).multiple(false).origin("9086333424242394544").done();
    b.aggregate("restriction", 0x7e19241b9ebc4458L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4457L).optional(true).ordered(true).multiple(false).origin("9086333424242541656").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFile() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "File", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e5efb76L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424236428150");
    b.version(2);
    b.aggregate("commands", 0x7e19241b9e5efb7fL).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x75bd3c2760ae482bL).optional(true).ordered(true).multiple(true).origin("9086333424236428159").done();
    b.alias("rule file");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreatedThanOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "GreatedThanOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x20466d1f4b224a52L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.RestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e329b1a0L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/2325666238755392082");
    b.version(2);
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanEqualOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "GreaterThanEqualOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e34baaeaL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.RestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e329b1a0L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622109371114");
    b.version(2);
    b.alias(">=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIFileLevelStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "IFileLevelStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x75bd3c2760ae482bL);
    b.interface_();
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/8484003412859308075");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInsertStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "InsertStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61c87eL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.DroolsStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x20466d1f4ad47b62L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424236611710");
    b.version(2);
    b.aggregate("factToInsert", 0x7e19241b9e61c8d3L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61c8d5L).optional(false).ordered(true).multiple(false).origin("9086333424236611795").done();
    b.alias("insert");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "LessThanOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e33bd6a1L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.RestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e329b1a0L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622108333729");
    b.version(2);
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteralRestrictionValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "LiteralRestrictionValue", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4a05L);
    b.class_(false, true, false);
    b.super_("Rules3.structure.RestrictionValue", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc445cL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424242543109");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiAnd() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "MultiAnd", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e32f3d9cL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.MultiRestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e32f3d9bL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622107508124");
    b.version(2);
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiOr() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "MultiOr", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e32f3dbcL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.MultiRestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e32f3d9bL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622107508156");
    b.version(2);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiRestriction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "MultiRestriction", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e32f3d74L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.Restriction", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4457L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622107508084");
    b.version(2);
    b.aggregate("lhsrestriction", 0x2bdd8885e32f3d75L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4457L).optional(false).ordered(true).multiple(false).origin("3160832622107508085").done();
    b.aggregate("rhsrestriction", 0x2bdd8885e32f3de0L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4457L).optional(false).ordered(true).multiple(false).origin("3160832622107508192").done();
    b.aggregate("operator", 0x2bdd8885e32f3d97L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e32f3d9bL).optional(true).ordered(true).multiple(false).origin("3160832622107508119").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultiRestrictionOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "MultiRestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e32f3d9bL);
    b.class_(false, true, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622107508123");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "NotCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d45L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.AbstractCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/5163961811780455749");
    b.version(2);
    b.aggregate("condition", 0x20466d1f4b07cf53L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL).optional(false).ordered(true).multiple(false).origin("2325666238753656659").done();
    b.alias("not");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "NotOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e34a1783L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.RestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e329b1a0L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622109267843");
    b.version(2);
    b.alias("!=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNullLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "NullLiteral", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x20466d1f4ae52417L);
    b.class_(false, false, false);
    b.super_("Rules3.structure.LiteralRestrictionValue", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4a05L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/2325666238751384599");
    b.version(2);
    b.alias("null");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNumericLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "NumericLiteral", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ec822beL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.LiteralRestrictionValue", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4a05L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424243319486");
    b.version(2);
    b.aggregate("value", 0x7e19241b9ec822bfL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L).optional(false).ordered(true).multiple(false).origin("9086333424243319487").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "OrCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870db4d7aL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.AbstractCondition", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/5163961811780455802");
    b.version(2);
    b.aggregate("leftSelector", 0x75bd3c2760ae4861L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL).optional(false).ordered(true).multiple(false).origin("8484003412859308129").done();
    b.aggregate("rightSelector", 0x75bd3c2760ae4862L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL).optional(false).ordered(true).multiple(false).origin("8484003412859308130").done();
    b.alias("or");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrConstraint() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "OrConstraint", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x47aa13e870ed605aL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.ConstraintGroup", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e726723L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/5163961811781640282");
    b.version(2);
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRestriction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "Restriction", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4457L);
    b.class_(false, true, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424242541655");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRestrictionOperator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "RestrictionOperator", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e329b1a0L);
    b.class_(false, true, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/3160832622107144608");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRestrictionValue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "RestrictionValue", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc445cL);
    b.class_(false, true, false);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424242541660");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRuleStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "RuleStatement", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61793cL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x75bd3c2760ae482bL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424236591420");
    b.version(2);
    b.aggregate("conditions", 0x7e19241b9e617cbcL).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e617cbeL).optional(true).ordered(true).multiple(true).origin("9086333424236592316").done();
    b.aggregate("outcomes", 0x7e19241b9e617cbfL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L).optional(false).ordered(true).multiple(false).origin("9086333424236592319").done();
    b.alias("rule");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRuleVariable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "RuleVariable", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61c8d6L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424236611798");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRuleVariableRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "RuleVariableRef", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61c8d5L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424236611797");
    b.version(2);
    b.associate("target", 0x7e19241b9e775f23L).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9e61c8d6L).optional(false).origin("9086333424238026531").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSingleValueRestriction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "SingleValueRestriction", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc445bL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.Restriction", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4457L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/9086333424242541659");
    b.version(2);
    b.aggregate("value", 0x7e19241b9ebc445dL).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc445cL).optional(false).ordered(true).multiple(false).origin("9086333424242541661").done();
    b.aggregate("operator", 0x2bdd8885e329b1bbL).target(0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x2bdd8885e329b1a0L).optional(false).ordered(true).multiple(false).origin("3160832622107144635").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteral() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Rules3", "StringLiteral", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x6ac2b99ff4c4085bL);
    b.class_(false, false, false);
    b.super_("Rules3.structure.LiteralRestrictionValue", 0xfd191ffbab394c9cL, 0xb211e8ff05fd03b0L, 0x7e19241b9ebc4a05L);
    b.origin("r:ba24fb4b-1527-417a-85ff-2f241cda9e2d(Rules3.structure)/7692915210159655003");
    b.version(2);
    b.property("value", 0x6ac2b99ff4c4085dL).type(PrimitiveTypeId.STRING).origin("7692915210159655005").done();
    b.alias("\"");
    return b.create();
  }
}
