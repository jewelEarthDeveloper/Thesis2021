package Rules.Excel.editor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class DEAD_tableUtil {
  public static headerGridParameters generateHeaders(SNode rules) {
    headerGridParameters params = new headerGridParameters();


    return params;
  }

  public static SNode getSelector(SNode condition) {
    {
      final SNode existsCondition = condition;
      if (SNodeOperations.isInstanceOf(existsCondition, CONCEPTS.ExistsCondition$zq)) {
        return SLinkOperations.getTarget(existsCondition, LINKS.selector$V5mL);
      }
    }

    throw new IllegalArgumentException();
  }



  public static List<SNode> generateGridCells(SNode rules, SNode rule) {
    headerGridParameters headers = generateHeaders(rules);

    SNode restriction = SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SNodeOperations.cast(ListSequence.fromList(SLinkOperations.getChildren(rule, LINKS.conditions$LY0l)).getElement(0), CONCEPTS.ExistsCondition$zq), LINKS.selector$V5mL), LINKS.newconstraints$KdZk)).getElement(0), CONCEPTS.FieldConstraint$oO), LINKS.restriction$5rgf);

    ArrayList<SNode> restictions = new ArrayList();
    restictions.add(restriction);
    return restictions;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ExistsCondition$zq = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d38L, "Rules2.structure.ExistsCondition");
    /*package*/ static final SConcept FieldConstraint$oO = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9eba05afL, "Rules2.structure.FieldConstraint");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink selector$V5mL = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d2eL, 0x47aa13e870db4d2fL, "selector");
    /*package*/ static final SContainmentLink conditions$LY0l = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61793cL, 0x7e19241b9e617cbcL, "conditions");
    /*package*/ static final SContainmentLink newconstraints$KdZk = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d31L, 0x7e19241b9eba0614L, "newconstraints");
    /*package*/ static final SContainmentLink restriction$5rgf = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9eba05afL, 0x7e19241b9ebc4458L, "restriction");
  }
}
