package Rules.Filter.editor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class FilterUtil {

  public static boolean isFilteredImport(SNode importStatement) {
    SNode filter = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(importStatement), CONCEPTS.FilterContainer$D3, true, new SAbstractConcept[]{})).first();
    if ((filter == null)) {
      return false;
    }
    if (ListSequence.fromList(SLinkOperations.getChildren(filter, LINKS.facts$B63O)).isEmpty()) {
      return false;
    }
    return !(ListSequence.fromList(SLinkOperations.getChildren(filter, LINKS.facts$B63O)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.target$C2kL);
      }
    }).contains(importStatement));
  }

  public static boolean isFilteredRule(SNode ruleStatement) {
    SNode filter = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(ruleStatement), CONCEPTS.FilterContainer$D3, true, new SAbstractConcept[]{})).first();
    if ((filter == null)) {
      return false;
    }
    if (ListSequence.fromList(SLinkOperations.getChildren(filter, LINKS.facts$B63O)).isEmpty()) {
      return false;
    }

    Iterable<SNode> ruleFacts = ListSequence.fromList(SNodeOperations.getNodeDescendants(ruleStatement, CONCEPTS.FactImportedRef$el, false, new SAbstractConcept[]{})).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.target$C2kL);
      }
    });

    return Sequence.fromIterable(ruleFacts).intersect(ListSequence.fromList(SLinkOperations.getChildren(filter, LINKS.facts$B63O)).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, LINKS.target$C2kL);
      }
    })).count() == 0;
  }

  public static boolean isFilteredEmpty(SNode emptyStatment) {
    {
      final SNode importStatement = SNodeOperations.getNextSibling(emptyStatment);
      if (SNodeOperations.isInstanceOf(importStatement, CONCEPTS.FactImportStatement$3W)) {
        return isFilteredImport(importStatement);
      }
    }

    {
      final SNode ruleStatement = SNodeOperations.getNextSibling(emptyStatment);
      if (SNodeOperations.isInstanceOf(ruleStatement, CONCEPTS.RuleStatement$TK)) {
        return isFilteredRule(ruleStatement);
      }
    }

    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept FilterContainer$D3 = MetaAdapterFactory.getConcept(0xf3353dc83c784e44L, 0xb056b8942417b777L, 0x18c68f981c69c208L, "Rules.Filter.structure.FilterContainer");
    /*package*/ static final SConcept FactImportedRef$el = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e725f44L, "Rules2.structure.FactImportedRef");
    /*package*/ static final SConcept FactImportStatement$3W = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e5fe1b7L, "Rules2.structure.FactImportStatement");
    /*package*/ static final SConcept RuleStatement$TK = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61793cL, "Rules2.structure.RuleStatement");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink facts$B63O = MetaAdapterFactory.getContainmentLink(0xf3353dc83c784e44L, 0xb056b8942417b777L, 0x18c68f981c69c208L, 0x18c68f981c69c209L, "facts");
    /*package*/ static final SReferenceLink target$C2kL = MetaAdapterFactory.getReferenceLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e725f44L, 0x7e19241b9e725f45L, "target");
  }
}
