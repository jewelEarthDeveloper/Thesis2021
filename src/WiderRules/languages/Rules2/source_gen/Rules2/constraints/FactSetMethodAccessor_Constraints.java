package Rules2.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.scope.ListScope;
import Rules2.behavior.RuleVariable__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import java.util.ArrayList;
import java.util.HashMap;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class FactSetMethodAccessor_Constraints extends BaseConstraintsDescriptor {
  private static final Logger LOG = LogManager.getLogger(FactSetMethodAccessor_Constraints.class);
  public FactSetMethodAccessor_Constraints() {
    super(CONCEPTS.FactSetMethodAccessor$HE);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.method$PpXC, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_yfso8q_a0a0a0a0a1a0a0a0c;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            SNode modifyStatement = null;
            if ((_context.getReferenceNode() != null)) {
              modifyStatement = SNodeOperations.cast(SNodeOperations.getParent(_context.getReferenceNode()), CONCEPTS.ModifyStatement$Gd);
            } else if (SNodeOperations.isInstanceOf(_context.getContextNode(), CONCEPTS.ModifyStatement$Gd)) {
              modifyStatement = SNodeOperations.cast(_context.getContextNode(), CONCEPTS.ModifyStatement$Gd);
            }

            if ((modifyStatement != null)) {

              return ListScope.forNamedElements(RuleVariable__BehaviorDescriptor.getMethods_id216rhXaXmGE.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(modifyStatement, LINKS.factToModify$xLgL), LINKS.target$O9jM)));
            } else {
              LoggingRuntime.logMsgView(Level.INFO, "in null section", FactSetMethodAccessor_Constraints.class, null, null);
              return ListScope.forNamedElements(new ArrayList<SNode>());
            }
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static final SNodePointer breakingNode_yfso8q_a0a0a0a0a1a0a0a0c = new SNodePointer("r:cd99c5ca-56d1-4bfb-b04f-f913c9184b5d(Rules2.constraints)", "9086333424240636960");

  private static final class CONCEPTS {
    /*package*/ static final SConcept FactSetMethodAccessor$HE = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e800dc7L, "Rules2.structure.FactSetMethodAccessor");
    /*package*/ static final SConcept ModifyStatement$Gd = MetaAdapterFactory.getConcept(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e800dc4L, "Rules2.structure.ModifyStatement");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink method$PpXC = MetaAdapterFactory.getReferenceLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e800dc7L, 0x7e19241b9e89501eL, "method");
    /*package*/ static final SContainmentLink factToModify$xLgL = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e800dc4L, 0x7e19241b9e800dc5L, "factToModify");
    /*package*/ static final SReferenceLink target$O9jM = MetaAdapterFactory.getReferenceLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61c8d5L, 0x7e19241b9e775f23L, "target");
  }
}
