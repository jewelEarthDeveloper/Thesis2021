package Rules2.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionAspectDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class IntentionsDescriptor extends AbstractIntentionAspectDescriptor {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new addComment_Intention();
        }
        break;
      case 1:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new toWhenDot_Intention();
        }
        break;
      case 2:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new makeExplicit_Intention();
        }
        break;
      case 3:
        if (true) {
          // concept 
          intentions = new IntentionFactory[2];
          intentions[0] = new makeExistsExplicit_Intention();
          intentions[1] = new makeNotCondition_Intention();
        }
        break;
      case 4:
        if (true) {
          // concept 
          intentions = new IntentionFactory[2];
          intentions[0] = new addVariableToSelector_Intention();
          intentions[1] = new addFromSelector_Intention();
        }
        break;
      case 5:
        if (true) {
          // concept 
          intentions = new IntentionFactory[2];
          intentions[0] = new addFieldVariable_Intention();
          intentions[1] = new toggleIsThis_Intention();
        }
        break;
      case 6:
        if (true) {
          // concept 
          intentions = new IntentionFactory[2];
          intentions[0] = new addSalienceRule_Intention();
          intentions[1] = new addNoLoopRule_Intention();
        }
        break;
      case 7:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new addDot_Intention();
        }
        break;
      case 8:
        if (true) {
          // concept 
          intentions = new IntentionFactory[1];
          intentions[0] = new newStatement_Intention();
        }
        break;
      default:
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[13];
    rv[0] = new makeExistsExplicit_Intention();
    rv[1] = new addVariableToSelector_Intention();
    rv[2] = new makeNotCondition_Intention();
    rv[3] = new addComment_Intention();
    rv[4] = new addSalienceRule_Intention();
    rv[5] = new addDot_Intention();
    rv[6] = new addFieldVariable_Intention();
    rv[7] = new makeExplicit_Intention();
    rv[8] = new addFromSelector_Intention();
    rv[9] = new toggleIsThis_Intention();
    rv[10] = new newStatement_Intention();
    rv[11] = new addNoLoopRule_Intention();
    rv[12] = new toWhenDot_Intention();
    return Arrays.asList(rv);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e617cbeL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L), MetaIdFactory.conceptId(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x20466d1f4ad47b62L), MetaIdFactory.conceptId(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d38L), MetaIdFactory.conceptId(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x47aa13e870db4d31L), MetaIdFactory.conceptId(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9eba05afL), MetaIdFactory.conceptId(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61793cL), MetaIdFactory.conceptId(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61c8d5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L)).seal();
}
