package Rules2.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public final class addNoLoopRule_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public addNoLoopRule_Intention() {
    super(Kind.NORMAL, true, new SNodePointer("r:fc8eb3b1-9b3c-4a54-8969-750af517f14c(Rules2.intentions)", "7692915210156961311"));
  }
  @Override
  public String getPresentation() {
    return "addNoLoopRule";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return (SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.attributes$V_VW), LINKS.noloop$EnIV), PROPS.visible$OQyM) ? "Remove No-Loop Attribute" : "Add No-Loop  Attribute");
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      SPropertyOperations.assign(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.attributes$V_VW), LINKS.noloop$EnIV), PROPS.visible$OQyM, !(SPropertyOperations.getBoolean(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.attributes$V_VW), LINKS.noloop$EnIV), PROPS.visible$OQyM)));
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return addNoLoopRule_Intention.this;
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink attributes$V_VW = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61793cL, 0x7e19241b9eb2878aL, "attributes");
    /*package*/ static final SContainmentLink noloop$EnIV = MetaAdapterFactory.getContainmentLink(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9eb25ea0L, 0x6ac2b99ff49a97c9L, "noloop");
  }

  private static final class PROPS {
    /*package*/ static final SProperty visible$OQyM = MetaAdapterFactory.getProperty(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x6ac2b99ff49a97c6L, 0x6ac2b99ff49a97c8L, "visible");
  }
}
