package Rules2.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractBinaryCondition = 0;
  public static final int AbstractCondition = 1;
  public static final int AbstractUnaryCondition = 2;
  public static final int AndCondition = 3;
  public static final int AndConstraint = 4;
  public static final int BooleanLiteral = 5;
  public static final int Comment = 6;
  public static final int CompoundValueRestriction = 7;
  public static final int Constraint = 8;
  public static final int ConstraintGroup = 9;
  public static final int ContainsOperator = 10;
  public static final int DeleteStatement = 11;
  public static final int DroolsStatement = 12;
  public static final int EmptyStatement = 13;
  public static final int EqualsOperator = 14;
  public static final int EvalCondition = 15;
  public static final int ExistsCondition = 16;
  public static final int FactImportStatement = 17;
  public static final int FactImportedRef = 18;
  public static final int FactProperty = 19;
  public static final int FactPropertyAccessorRef = 20;
  public static final int FactSelector = 21;
  public static final int FactSetMethodAccessor = 22;
  public static final int FieldConstraint = 23;
  public static final int File = 24;
  public static final int GlobalStatement = 25;
  public static final int GreatedThanOperator = 26;
  public static final int GreaterThanEqualOperator = 27;
  public static final int HaltStatement = 28;
  public static final int IFileLevelStatement = 29;
  public static final int IMultiRestrictionable = 30;
  public static final int IThenStatements = 31;
  public static final int IWhenField = 32;
  public static final int InSet = 33;
  public static final int InlineEval = 34;
  public static final int InsertLogicalStatement = 35;
  public static final int InsertStatement = 36;
  public static final int LessThanOperator = 37;
  public static final int LiteralRestrictionValue = 38;
  public static final int ModifyStatement = 39;
  public static final int MultiAnd = 40;
  public static final int MultiOr = 41;
  public static final int MultiRestriction = 42;
  public static final int MultiRestrictionOperator = 43;
  public static final int NoLoopAttribute = 44;
  public static final int NotCondition = 45;
  public static final int NotOperator = 46;
  public static final int NullLiteral = 47;
  public static final int NumericLiteral = 48;
  public static final int OrCondition = 49;
  public static final int OrConstraint = 50;
  public static final int Restriction = 51;
  public static final int RestrictionGroup = 52;
  public static final int RestrictionOperator = 53;
  public static final int RestrictionValue = 54;
  public static final int ReturnValueRestrictionValue = 55;
  public static final int RuleAttributes = 56;
  public static final int RuleStatement = 57;
  public static final int RuleVariable = 58;
  public static final int RuleVariableRef = 59;
  public static final int SalienceAttribute = 60;
  public static final int SetMembership = 61;
  public static final int SingleValueRestriction = 62;
  public static final int StringLiteral = 63;
  public static final int ThenExpression = 64;
  public static final int ThenStatements = 65;
  public static final int VariableRestrictionValue = 66;
  public static final int WhenFieldDot = 67;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L);
    builder.put(0x47aa13e870db4d32L, AbstractBinaryCondition);
    builder.put(0x7e19241b9e617cbeL, AbstractCondition);
    builder.put(0x47aa13e870db4d2eL, AbstractUnaryCondition);
    builder.put(0x47aa13e870db4d5dL, AndCondition);
    builder.put(0x7e19241b9e726729L, AndConstraint);
    builder.put(0x7e19241b9ebc4a06L, BooleanLiteral);
    builder.put(0x7e19241b9eb0361fL, Comment);
    builder.put(0x6ac2b99ff4bfd68eL, CompoundValueRestriction);
    builder.put(0x47aa13e870e2dc35L, Constraint);
    builder.put(0x7e19241b9e726723L, ConstraintGroup);
    builder.put(0x20466d1f4afcd8e1L, ContainsOperator);
    builder.put(0x7e19241b9e756c65L, DeleteStatement);
    builder.put(0x20466d1f4ad47b62L, DroolsStatement);
    builder.put(0x7e19241b9e60be27L, EmptyStatement);
    builder.put(0x2bdd8885e329b1c1L, EqualsOperator);
    builder.put(0x6ac2b99ff4d83ea0L, EvalCondition);
    builder.put(0x47aa13e870db4d38L, ExistsCondition);
    builder.put(0x7e19241b9e5fe1b7L, FactImportStatement);
    builder.put(0x7e19241b9e725f44L, FactImportedRef);
    builder.put(0x7e19241b9e793468L, FactProperty);
    builder.put(0x7e19241b9e7d398bL, FactPropertyAccessorRef);
    builder.put(0x47aa13e870db4d31L, FactSelector);
    builder.put(0x7e19241b9e800dc7L, FactSetMethodAccessor);
    builder.put(0x7e19241b9eba05afL, FieldConstraint);
    builder.put(0x7e19241b9e5efb76L, File);
    builder.put(0x20466d1f4acd7babL, GlobalStatement);
    builder.put(0x20466d1f4b224a52L, GreatedThanOperator);
    builder.put(0x2bdd8885e34baaeaL, GreaterThanEqualOperator);
    builder.put(0x20466d1f4ad4081bL, HaltStatement);
    builder.put(0x7e19241b9e5efb81L, IFileLevelStatement);
    builder.put(0x2bdd8885e32f3dd3L, IMultiRestrictionable);
    builder.put(0x7e19241b9e617cc2L, IThenStatements);
    builder.put(0x6ac2b99ff4c96d72L, IWhenField);
    builder.put(0x6ac2b99ff4bfd694L, InSet);
    builder.put(0x6ac2b99ff4b558e0L, InlineEval);
    builder.put(0x7e19241b9eae4025L, InsertLogicalStatement);
    builder.put(0x7e19241b9e61c87eL, InsertStatement);
    builder.put(0x2bdd8885e33bd6a1L, LessThanOperator);
    builder.put(0x7e19241b9ebc4a05L, LiteralRestrictionValue);
    builder.put(0x7e19241b9e800dc4L, ModifyStatement);
    builder.put(0x2bdd8885e32f3d9cL, MultiAnd);
    builder.put(0x2bdd8885e32f3dbcL, MultiOr);
    builder.put(0x2bdd8885e32f3d74L, MultiRestriction);
    builder.put(0x2bdd8885e32f3d9bL, MultiRestrictionOperator);
    builder.put(0x6ac2b99ff49a97c6L, NoLoopAttribute);
    builder.put(0x47aa13e870db4d45L, NotCondition);
    builder.put(0x2bdd8885e34a1783L, NotOperator);
    builder.put(0x20466d1f4ae52417L, NullLiteral);
    builder.put(0x7e19241b9ec822beL, NumericLiteral);
    builder.put(0x47aa13e870db4d7aL, OrCondition);
    builder.put(0x47aa13e870ed605aL, OrConstraint);
    builder.put(0x7e19241b9ebc4457L, Restriction);
    builder.put(0x2bdd8885e32f3d77L, RestrictionGroup);
    builder.put(0x2bdd8885e329b1a0L, RestrictionOperator);
    builder.put(0x7e19241b9ebc445cL, RestrictionValue);
    builder.put(0x7e19241b9ec3a395L, ReturnValueRestrictionValue);
    builder.put(0x7e19241b9eb25ea0L, RuleAttributes);
    builder.put(0x7e19241b9e61793cL, RuleStatement);
    builder.put(0x7e19241b9e61c8d6L, RuleVariable);
    builder.put(0x7e19241b9e61c8d5L, RuleVariableRef);
    builder.put(0x7e19241b9eb25ea3L, SalienceAttribute);
    builder.put(0x6ac2b99ff4bfd68fL, SetMembership);
    builder.put(0x7e19241b9ebc445bL, SingleValueRestriction);
    builder.put(0x6ac2b99ff4c4085bL, StringLiteral);
    builder.put(0x7e19241b9e617cc4L, ThenExpression);
    builder.put(0x20466d1f4b1691b8L, ThenStatements);
    builder.put(0x7e19241b9ebe5bf9L, VariableRestrictionValue);
    builder.put(0x6ac2b99ff4c96d71L, WhenFieldDot);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
