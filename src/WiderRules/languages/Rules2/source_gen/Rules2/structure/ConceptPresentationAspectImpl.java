package Rules2.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractBinaryCondition;
  private ConceptPresentation props_AbstractCondition;
  private ConceptPresentation props_AbstractUnaryCondition;
  private ConceptPresentation props_AndCondition;
  private ConceptPresentation props_AndConstraint;
  private ConceptPresentation props_BooleanLiteral;
  private ConceptPresentation props_Comment;
  private ConceptPresentation props_CompoundValueRestriction;
  private ConceptPresentation props_Constraint;
  private ConceptPresentation props_ConstraintGroup;
  private ConceptPresentation props_ContainsOperator;
  private ConceptPresentation props_DeleteStatement;
  private ConceptPresentation props_DroolsStatement;
  private ConceptPresentation props_EmptyStatement;
  private ConceptPresentation props_EqualsOperator;
  private ConceptPresentation props_EvalCondition;
  private ConceptPresentation props_ExistsCondition;
  private ConceptPresentation props_FactImportStatement;
  private ConceptPresentation props_FactImportedRef;
  private ConceptPresentation props_FactProperty;
  private ConceptPresentation props_FactPropertyAccessorRef;
  private ConceptPresentation props_FactSelector;
  private ConceptPresentation props_FactSetMethodAccessor;
  private ConceptPresentation props_FieldConstraint;
  private ConceptPresentation props_File;
  private ConceptPresentation props_GlobalStatement;
  private ConceptPresentation props_GreatedThanOperator;
  private ConceptPresentation props_GreaterThanEqualOperator;
  private ConceptPresentation props_HaltStatement;
  private ConceptPresentation props_IFileLevelStatement;
  private ConceptPresentation props_IMultiRestrictionable;
  private ConceptPresentation props_IThenStatements;
  private ConceptPresentation props_IWhenField;
  private ConceptPresentation props_InSet;
  private ConceptPresentation props_InlineEval;
  private ConceptPresentation props_InsertLogicalStatement;
  private ConceptPresentation props_InsertStatement;
  private ConceptPresentation props_LessThanOperator;
  private ConceptPresentation props_LiteralRestrictionValue;
  private ConceptPresentation props_ModifyStatement;
  private ConceptPresentation props_MultiAnd;
  private ConceptPresentation props_MultiOr;
  private ConceptPresentation props_MultiRestriction;
  private ConceptPresentation props_MultiRestrictionOperator;
  private ConceptPresentation props_NoLoopAttribute;
  private ConceptPresentation props_NotCondition;
  private ConceptPresentation props_NotOperator;
  private ConceptPresentation props_NullLiteral;
  private ConceptPresentation props_NumericLiteral;
  private ConceptPresentation props_OrCondition;
  private ConceptPresentation props_OrConstraint;
  private ConceptPresentation props_Restriction;
  private ConceptPresentation props_RestrictionGroup;
  private ConceptPresentation props_RestrictionOperator;
  private ConceptPresentation props_RestrictionValue;
  private ConceptPresentation props_ReturnValueRestrictionValue;
  private ConceptPresentation props_RuleAttributes;
  private ConceptPresentation props_RuleStatement;
  private ConceptPresentation props_RuleVariable;
  private ConceptPresentation props_RuleVariableRef;
  private ConceptPresentation props_SalienceAttribute;
  private ConceptPresentation props_SetMembership;
  private ConceptPresentation props_SingleValueRestriction;
  private ConceptPresentation props_StringLiteral;
  private ConceptPresentation props_ThenExpression;
  private ConceptPresentation props_ThenStatements;
  private ConceptPresentation props_VariableRestrictionValue;
  private ConceptPresentation props_WhenFieldDot;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractBinaryCondition:
        if (props_AbstractBinaryCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractBinaryCondition = cpb.create();
        }
        return props_AbstractBinaryCondition;
      case LanguageConceptSwitch.AbstractCondition:
        if (props_AbstractCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractCondition = cpb.create();
        }
        return props_AbstractCondition;
      case LanguageConceptSwitch.AbstractUnaryCondition:
        if (props_AbstractUnaryCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractUnaryCondition = cpb.create();
        }
        return props_AbstractUnaryCondition;
      case LanguageConceptSwitch.AndCondition:
        if (props_AndCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("and");
          props_AndCondition = cpb.create();
        }
        return props_AndCondition;
      case LanguageConceptSwitch.AndConstraint:
        if (props_AndConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("&&");
          props_AndConstraint = cpb.create();
        }
        return props_AndConstraint;
      case LanguageConceptSwitch.BooleanLiteral:
        if (props_BooleanLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BooleanLiteral");
          props_BooleanLiteral = cpb.create();
        }
        return props_BooleanLiteral;
      case LanguageConceptSwitch.Comment:
        if (props_Comment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Comment");
          props_Comment = cpb.create();
        }
        return props_Comment;
      case LanguageConceptSwitch.CompoundValueRestriction:
        if (props_CompoundValueRestriction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CompoundValueRestriction");
          props_CompoundValueRestriction = cpb.create();
        }
        return props_CompoundValueRestriction;
      case LanguageConceptSwitch.Constraint:
        if (props_Constraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Constraint = cpb.create();
        }
        return props_Constraint;
      case LanguageConceptSwitch.ConstraintGroup:
        if (props_ConstraintGroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConstraintGroup = cpb.create();
        }
        return props_ConstraintGroup;
      case LanguageConceptSwitch.ContainsOperator:
        if (props_ContainsOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("contains");
          props_ContainsOperator = cpb.create();
        }
        return props_ContainsOperator;
      case LanguageConceptSwitch.DeleteStatement:
        if (props_DeleteStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("delete a fact from working memory");
          cpb.rawPresentation("delete");
          props_DeleteStatement = cpb.create();
        }
        return props_DeleteStatement;
      case LanguageConceptSwitch.DroolsStatement:
        if (props_DroolsStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DroolsStatement = cpb.create();
        }
        return props_DroolsStatement;
      case LanguageConceptSwitch.EmptyStatement:
        if (props_EmptyStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EmptyStatement");
          props_EmptyStatement = cpb.create();
        }
        return props_EmptyStatement;
      case LanguageConceptSwitch.EqualsOperator:
        if (props_EqualsOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("==");
          props_EqualsOperator = cpb.create();
        }
        return props_EqualsOperator;
      case LanguageConceptSwitch.EvalCondition:
        if (props_EvalCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("eval");
          props_EvalCondition = cpb.create();
        }
        return props_EvalCondition;
      case LanguageConceptSwitch.ExistsCondition:
        if (props_ExistsCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("exists");
          props_ExistsCondition = cpb.create();
        }
        return props_ExistsCondition;
      case LanguageConceptSwitch.FactImportStatement:
        if (props_FactImportStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("import");
          props_FactImportStatement = cpb.create();
        }
        return props_FactImportStatement;
      case LanguageConceptSwitch.FactImportedRef:
        if (props_FactImportedRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e725f44L, 0x7e19241b9e725f45L, "target", "", "");
          props_FactImportedRef = cpb.create();
        }
        return props_FactImportedRef;
      case LanguageConceptSwitch.FactProperty:
        if (props_FactProperty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e793468L, 0x7e19241b9e793469L, "property", "", "");
          props_FactProperty = cpb.create();
        }
        return props_FactProperty;
      case LanguageConceptSwitch.FactPropertyAccessorRef:
        if (props_FactPropertyAccessorRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration", "", "");
          props_FactPropertyAccessorRef = cpb.create();
        }
        return props_FactPropertyAccessorRef;
      case LanguageConceptSwitch.FactSelector:
        if (props_FactSelector == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FactSelector");
          props_FactSelector = cpb.create();
        }
        return props_FactSelector;
      case LanguageConceptSwitch.FactSetMethodAccessor:
        if (props_FactSetMethodAccessor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e800dc7L, 0x7e19241b9e89501eL, "method", "", "");
          props_FactSetMethodAccessor = cpb.create();
        }
        return props_FactSetMethodAccessor;
      case LanguageConceptSwitch.FieldConstraint:
        if (props_FieldConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FieldConstraint");
          props_FieldConstraint = cpb.create();
        }
        return props_FieldConstraint;
      case LanguageConceptSwitch.File:
        if (props_File == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("this file contains the rules");
          cpb.presentationByName();
          props_File = cpb.create();
        }
        return props_File;
      case LanguageConceptSwitch.GlobalStatement:
        if (props_GlobalStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("global");
          props_GlobalStatement = cpb.create();
        }
        return props_GlobalStatement;
      case LanguageConceptSwitch.GreatedThanOperator:
        if (props_GreatedThanOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">");
          props_GreatedThanOperator = cpb.create();
        }
        return props_GreatedThanOperator;
      case LanguageConceptSwitch.GreaterThanEqualOperator:
        if (props_GreaterThanEqualOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation(">=");
          props_GreaterThanEqualOperator = cpb.create();
        }
        return props_GreaterThanEqualOperator;
      case LanguageConceptSwitch.HaltStatement:
        if (props_HaltStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("stop drools runner");
          cpb.rawPresentation("halt");
          props_HaltStatement = cpb.create();
        }
        return props_HaltStatement;
      case LanguageConceptSwitch.IFileLevelStatement:
        if (props_IFileLevelStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IFileLevelStatement = cpb.create();
        }
        return props_IFileLevelStatement;
      case LanguageConceptSwitch.IMultiRestrictionable:
        if (props_IMultiRestrictionable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IMultiRestrictionable = cpb.create();
        }
        return props_IMultiRestrictionable;
      case LanguageConceptSwitch.IThenStatements:
        if (props_IThenStatements == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IThenStatements = cpb.create();
        }
        return props_IThenStatements;
      case LanguageConceptSwitch.IWhenField:
        if (props_IWhenField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IWhenField = cpb.create();
        }
        return props_IWhenField;
      case LanguageConceptSwitch.InSet:
        if (props_InSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("in");
          props_InSet = cpb.create();
        }
        return props_InSet;
      case LanguageConceptSwitch.InlineEval:
        if (props_InlineEval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("eval");
          props_InlineEval = cpb.create();
        }
        return props_InlineEval;
      case LanguageConceptSwitch.InsertLogicalStatement:
        if (props_InsertLogicalStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("fact will stay in memory until when is false or retracted");
          cpb.rawPresentation("insertLogical");
          props_InsertLogicalStatement = cpb.create();
        }
        return props_InsertLogicalStatement;
      case LanguageConceptSwitch.InsertStatement:
        if (props_InsertStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("insert fact into working memory");
          cpb.rawPresentation("insert");
          props_InsertStatement = cpb.create();
        }
        return props_InsertStatement;
      case LanguageConceptSwitch.LessThanOperator:
        if (props_LessThanOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<");
          props_LessThanOperator = cpb.create();
        }
        return props_LessThanOperator;
      case LanguageConceptSwitch.LiteralRestrictionValue:
        if (props_LiteralRestrictionValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LiteralRestrictionValue = cpb.create();
        }
        return props_LiteralRestrictionValue;
      case LanguageConceptSwitch.ModifyStatement:
        if (props_ModifyStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("modify a fact in the working memory");
          cpb.rawPresentation("modify");
          props_ModifyStatement = cpb.create();
        }
        return props_ModifyStatement;
      case LanguageConceptSwitch.MultiAnd:
        if (props_MultiAnd == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("&&");
          props_MultiAnd = cpb.create();
        }
        return props_MultiAnd;
      case LanguageConceptSwitch.MultiOr:
        if (props_MultiOr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("||");
          props_MultiOr = cpb.create();
        }
        return props_MultiOr;
      case LanguageConceptSwitch.MultiRestriction:
        if (props_MultiRestriction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MultiRestriction");
          props_MultiRestriction = cpb.create();
        }
        return props_MultiRestriction;
      case LanguageConceptSwitch.MultiRestrictionOperator:
        if (props_MultiRestrictionOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultiRestrictionOperator = cpb.create();
        }
        return props_MultiRestrictionOperator;
      case LanguageConceptSwitch.NoLoopAttribute:
        if (props_NoLoopAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("no-loop");
          props_NoLoopAttribute = cpb.create();
        }
        return props_NoLoopAttribute;
      case LanguageConceptSwitch.NotCondition:
        if (props_NotCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("not");
          props_NotCondition = cpb.create();
        }
        return props_NotCondition;
      case LanguageConceptSwitch.NotOperator:
        if (props_NotOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("!=");
          props_NotOperator = cpb.create();
        }
        return props_NotOperator;
      case LanguageConceptSwitch.NullLiteral:
        if (props_NullLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("null");
          props_NullLiteral = cpb.create();
        }
        return props_NullLiteral;
      case LanguageConceptSwitch.NumericLiteral:
        if (props_NumericLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NumericLiteral");
          props_NumericLiteral = cpb.create();
        }
        return props_NumericLiteral;
      case LanguageConceptSwitch.OrCondition:
        if (props_OrCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("or");
          props_OrCondition = cpb.create();
        }
        return props_OrCondition;
      case LanguageConceptSwitch.OrConstraint:
        if (props_OrConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("||");
          props_OrConstraint = cpb.create();
        }
        return props_OrConstraint;
      case LanguageConceptSwitch.Restriction:
        if (props_Restriction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Restriction = cpb.create();
        }
        return props_Restriction;
      case LanguageConceptSwitch.RestrictionGroup:
        if (props_RestrictionGroup == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RestrictionGroup");
          props_RestrictionGroup = cpb.create();
        }
        return props_RestrictionGroup;
      case LanguageConceptSwitch.RestrictionOperator:
        if (props_RestrictionOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RestrictionOperator = cpb.create();
        }
        return props_RestrictionOperator;
      case LanguageConceptSwitch.RestrictionValue:
        if (props_RestrictionValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RestrictionValue = cpb.create();
        }
        return props_RestrictionValue;
      case LanguageConceptSwitch.ReturnValueRestrictionValue:
        if (props_ReturnValueRestrictionValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ReturnValueRestrictionValue");
          props_ReturnValueRestrictionValue = cpb.create();
        }
        return props_ReturnValueRestrictionValue;
      case LanguageConceptSwitch.RuleAttributes:
        if (props_RuleAttributes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RuleAttributes");
          props_RuleAttributes = cpb.create();
        }
        return props_RuleAttributes;
      case LanguageConceptSwitch.RuleStatement:
        if (props_RuleStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("rule");
          cpb.presentationByName();
          props_RuleStatement = cpb.create();
        }
        return props_RuleStatement;
      case LanguageConceptSwitch.RuleVariable:
        if (props_RuleVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RuleVariable = cpb.create();
        }
        return props_RuleVariable;
      case LanguageConceptSwitch.RuleVariableRef:
        if (props_RuleVariableRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x17e7b90aaaca44c7L, 0xaaaa8155bb498bd7L, 0x7e19241b9e61c8d5L, 0x7e19241b9e775f23L, "target", "", "");
          props_RuleVariableRef = cpb.create();
        }
        return props_RuleVariableRef;
      case LanguageConceptSwitch.SalienceAttribute:
        if (props_SalienceAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SalienceAttribute");
          props_SalienceAttribute = cpb.create();
        }
        return props_SalienceAttribute;
      case LanguageConceptSwitch.SetMembership:
        if (props_SetMembership == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SetMembership = cpb.create();
        }
        return props_SetMembership;
      case LanguageConceptSwitch.SingleValueRestriction:
        if (props_SingleValueRestriction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SingleValueRestriction");
          props_SingleValueRestriction = cpb.create();
        }
        return props_SingleValueRestriction;
      case LanguageConceptSwitch.StringLiteral:
        if (props_StringLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("\"");
          props_StringLiteral = cpb.create();
        }
        return props_StringLiteral;
      case LanguageConceptSwitch.ThenExpression:
        if (props_ThenExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ThenExpression");
          props_ThenExpression = cpb.create();
        }
        return props_ThenExpression;
      case LanguageConceptSwitch.ThenStatements:
        if (props_ThenStatements == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ThenStatements");
          props_ThenStatements = cpb.create();
        }
        return props_ThenStatements;
      case LanguageConceptSwitch.VariableRestrictionValue:
        if (props_VariableRestrictionValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VariableRestrictionValue");
          props_VariableRestrictionValue = cpb.create();
        }
        return props_VariableRestrictionValue;
      case LanguageConceptSwitch.WhenFieldDot:
        if (props_WhenFieldDot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("WhenFieldDot");
          props_WhenFieldDot = cpb.create();
        }
        return props_WhenFieldDot;
    }
    return null;
  }
}
