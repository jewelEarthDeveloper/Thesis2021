AB - INGRID: Creating Languages in MPS from ANTLR Grammars 
JetBrains MPS is a language workbench, an IDE that allows developers both to write code and create language definitions.

We present INGRID, a method for construction of a language definition in MPS based on its ANTLR grammar.

The prevailing approach to define valid syntaxes for programming languages is through grammars, which are typically written in notations based on the Extended Backus-Naur Form (EBNF)

An alternative approach is projectional (or structural) editing [8, 7, 2], where a developer directly manipulates the AST representation of the source code instead of plain text.
This idea emerged as early as in 1970s, but it failed to get adopted widely, mostly due to inconvenient and unnatural way of manipulating code.

Projectional editing, keeping the code in the AST form, and the absence of parsers, brings along several benefits.
• A projectional editor does not allow the developers to enter syntactically invalid code, because it controls the interaction between the user and the program code.
• Programming languages can be defined in a modular way, and multiple languages can be easily combined together in a single program or one can extend another.
• The languages may support diverse contextual or non-parseable notations with complex layout, such as tables, diagrams, and mathematical expressions.
• Since the projection is detached from the physical representation of code (AST), authors of languages can define multiple notations and allow the developers to switch between them on the screen.

Voelter et al. [7] discuss the benefits and limitations of projectional editors in more detail.


Nevertheless, the usage of projectional editors introduces some new problems.
Before a language can be used inside an editor, it has to be defined through the specific infrastructure, so that the IDE can understand the language and work with it.
More precisely, an author of a language has to create:
1. the abstract syntax (structure of the language), which defines the types of allowed AST nodes, 2. the concrete syntax for editing, i.e. projection of the AST on the screen and interactions with the user, and 3. text generation scripts to enable creation of plain text representation used as input for compilers.

JetBrains MPS is a language workbench — an IDE that allows developers to create their own languages and use them to write code.
The code can then be transformed into a target language, typically a GPPL such as Java or C, and eventually compiled into executable programs.

When using the MPS projectional editor, the developer does not work with the textual representation of the source code, but rather directly with its AST that is the model of the code.

The building blocks of MPS models are called nodes.
Code of any program in MPS is built from nodes, which represent instances of concepts from the languages that the program is written in.
In MPS, a concept is a language element, i.e. a building block of a language definition.
We use the terms MPS concept and AST node when needed to avoid confusion 

One of the key advantages of projectional editing stems from the separation of abstract and concrete syntax.
While AST provides a complete and precise representation of the code, the way it is displayed on the screen and the way the user interacts with it are unconstrained.
The editor can take any visual form and shape.
The language author can define multiple alternative visualizations and let the developer choose one that fits best the task at hand.
In particular, the visual representations are not bound to be just textual at all.

Structure represents the abstract syntax (types and hierarchy of AST nodes), Editor defines the concrete syntax (i.e., how the code is visualized and edited) and TextGen specifies how AST nodes are transformed into textual representation.

Languages are built from the concepts using techniques known from object-oriented programming — containment, inheritance, interfaces, and so on.
Therefore, a definition of a whole language in MPS typically has an object-oriented and hierarchical nature.

Structure.
The fundamental aspect of any MPS language is Structure.
It must be created first for each intended language concept.
Structure specifies core attributes of an MPS concept such as the name, inheritance relationships, child concepts (their types and cardinalities), implemented interfaces, and references to other AST nodes 

Editor.
The Editor aspect is where the language designer specifies what the projectional representation of a code fragment (an AST) looks like on the screen and how the user interacts with the code.

JetBrains have developed a cellular system that enables placing properties and children of a node (concept) into different cells.
The author usually incorporates all of the node’s children, references, and properties inside the representation, so that future users of the language can insert all values that the node expects.
Additionally, cells of the editor can be styled using a language similar to CSS.
Supported visual characteristics include color and indentation.


TextGen.
The TextGen aspect specifies how a given AST node will be translated into plain text representation.
It is typically needed only for the bottom-line base languages.
DSLs, on the other hand, need to define rules for model-to-model conversions (Generators), since programs in such languages are rarely converted to text directly 









[8]	M.
Voelter, J.
Warmer, and B.
Kolb.
Projecting a Modular Future.
IEEE Software, 32(5), 2015.
[14]	F.
Campagne.
The ANTRL_MPS project, https://github.com/CampagneLaboratory/ANTLR_MPS
