

Business rules are statements that precisely describe, constrain, and control the structure, operations and strategies of a business in an organization 

Drools use an enhanced implementation of the Rete algorithm.
Drools support the JSR-94 standard for its business rules engine and enterprise framework for the construction, maintenance, and enforcement of business policies in an organization, application, or service.

A business rule is a statement that defines or constrains some aspect of business and always resolves to true or false.
Business rules declare business structure or behavior of the business.
Business rules describe the operations, definitions and constraints that exist in an organization [wikipedia].


Static business rules are constraints or derivations that apply to each individual state of the business.
Dynamic business rules are concerned to a request of actions in response to events [9].

Business rules must be a term or fact (like structural assertion), or a constraint (like action assertion), or a derivation.
They are atomic; it means that they cannot be broken further into more detailed business rules.
If broken apart any further, they might be loss of important information about the business [3].


Collecting business rules is also called rules harvesting or business rule mining 
Definitions of business terms: The language for expressing the rules is the most basic element of a business rule.
The definition of a term is a business rule that shows how people describe the business.
As a result, definitions of terms create a category of business rule.
Generally terms have been documented in a Glossary or as entities in a conceptual model or entity-relationship model [3].

 Facts: The behavior of an organization can be described using the facts that relate terms to each other.
For instance, to say that a customer can place an order is a business rule.
Facts can be documented as natural language sentences, by using a graphical model, and facts can be shown relationships, attributes, and generalization structures [3].

 Constraints ( as ‘action assertions’): Constraints describe conditions or limitations in behavior.
For example, what data may or may not be updated, or prevent an action to taking place [3].

 Derivations: Derivation refers to how knowledge in one form may be transformed into other knowledge, probably in a different form [3].


Business rules engines typically support rules, facts, priorities, mutual exclusions, preconditions, and other functions [1]

Forward chaining: This method typically starts with the available data and uses rules to extract more data until a goal is reached.
A business rules engine, using forward chaining, searches the rules until it finds one where the antecedent rule (like “If” clause) is known to be true.
When such a rule is found, the engine can conclude the consequent (like “Then” clause).
Business rules engines will iterate through this process until a goal is reached [wiki].
 Backward chaining: This method typically starts with a list of goals or a hypothesis and works backwards from the consequent to the antecedent to search for available data that will support any of these consequents.
In this case, a rules engine seeks to resolve the facts that fit a particular goal.
A business rules engine using backward chaining would search the rules until it finds one which has a consequent (like “Then” clause) that matches a desired goal.
It is often called goal driven because it tries to determine if something exists based on existing information [wiki]


Based on how rules are scheduled for execution, a number of different types of rules engines can be distinguished as follows:
 Production/Inference rules: These types of rules are used to represent behaviors of the type IF condition THEN action [1].
For example, this rule could answer the question: "Should this employee be allowed to receive the mortgage?" This rule for this question would be executed in the form of: "IF some-condition THEN allow-employee-amortgage".
 Reaction/Event Condition Action rules: These types of rules detect and react to incoming events and process event patterns [1].
For example, a reactive rule engine could be used to alert a manager that an employee works in the office generally less than 8 hours almost every day.
 Deterministic rules: These types of rules do not always behave like forward chaining and backward chaining, but instead they use domain-specific language-approaches to describe policies [1].
Domain-specific language is a type of languages which defines its own representation of rules, requirement of translation to generic rules engines or its own custom engines [5].
This approach is often easier to implement and maintain, and provides better performance.

Definition - Drools is a rules engine implementation based on Charles Forgy’s Rete algorithm tailored for the Java language.
Rete algorithm has been adapted to an object-oriented interface and empowered to accept more natural expression of business rules with regards to business objects 

The theory driving Drools R&D comes from KRR which KRR functionalities are defined and delivered to developers by a computer program called rule engines.
At a high level KRR has three components [11]:
 Ontology  Rules  Data Ontology is the representation model used for describing “things”.
The rules perform the reasoning, i.e., they facilitate “thinking”.
The term “rules engine” is quite ambiguous in that it can be any system that uses rules, in any form that can be applied to data to produce outcomes.
This includes simple systems like form validation and dynamic expression engines. 

Knowledge representation and reasoning (KRR)

Drools started life as a specific type of rule engine called a Production Rule System (PRS) and it was based on the Rete algorithm.
The Rete algorithm is core of a Production Rule System and is able to scale to a large number of rules and facts.
A Production Rule is a two-part structure, as follows,: the engine matches facts and data against Production Rules - also called Productions or just Rules - to infer conclusions which result in actions [11]








[3] David Hay, Allan Kolber, “GUIDE Business Rules Project,”, The Business Rules Group, final report, revision 1.3, July 2000
[6] Marcin Grzejszczak, Mario Fusco, “Business Rules Management Systems with Drools,”, http://www.jboss.org/drools/drools-expert.html [9] Nasser Karimi, Junichi Iijima,”A Logical Approach for Implementing Dynamic Business Rules,”, Contemporary Management Research, Pages 29-52, Vol. 6, No. 1, March 2010
[15] Ludwig Ostermayer, Dietmar Seipel, “Knowledge Engineering for Business Rules in PROLOG,”,